Removing unwanted objects or abandoned objects from the memory is called garbage collection (GC).

But, there is no destructors in java. In java, there exist better mechanism to handle the garbage collection. You need not to delete unwanted objects explicitly. JVM does this for you. JVM implicitly sweeps out abandoned objects from the memory.

FINALIZE() IN JAVA :

finalize() method is a protected and non-static method of java.lang.Object class. This method will be available in all objects you create in java. This method is used to perform some final operations or clean up operations on an object before it is removed from the memory.  you can override the finalize() method to keep those operations you want to perform before an object is destroyed.

	protected void finalize() throws Throwable
	{
		//Keep some resource closing operations here
	}
	
Garbage Collection In Java :

Whenever you run a java program, JVM creates three threads. 1) main thread   2) Thread Scheduler   3) Garbage Collector Thread. In these three threads, main thread is a user thread and remaining two are daemon threads which run in background.The task of main thread is to execute the main() method. The task of thread scheduler is to schedule the threads. The task of garbage collector thread is to sweep out abandoned objects from the heap memory. Abandoned objects or dead objects are those objects which does not have live references. Garbage collector thread before sweeping out an abandoned object, it calls finalize() method of that object. After finalize() method is executed, object is destroyed from the memory. 

Some Interesting Points About Garbage Collection And finalize() method In Java :

* In some scenarios, finalize() method is not at all called by the garbage collector thread. For example, When I executed the below program in my system, finalize() method of Class A is not at all executed.

	class A
	{
		int i = 50;
	 
		@Override
		protected void finalize() throws Throwable
		{
			System.out.println("From Finalize Method");
		}
	}
	 
	public class Test
	{
	   public static void main(String[] args)
	   {
		  //Creating two instances of class A
	 
		  A a1 = new A();
	 
		  A a2 = new A();
	 
		  //Assigning a2 to a1
	 
		  a1 = a2;
	 
		  //Now both a1 and a2 will be pointing to same object 
	 
		  //An object earlier referred by a1 will become abandoned
	 
		  System.out.println("done");
	   }
	}
	
*  You can make finalize() method to be executed forcefully using either Runtime.getRuntime().runFinalization() OR Runtime.runFinalizersOnExit(true). But, both the methods have disadvantages. Runtime.getRuntime().runFinalization() makes the just best effort to execute finalize() method. It is not gauranteed that it will execute finalize() method. Runtime.runFinalizersOnExit(true) is deprecated in JDK because some times it runs finalize() method on live objects also.

* You can call garbage collector explicitly using System.gc() or RunTime.getRunTime().gc(). Again it is just a request to garbage collector not a command.

*  finalize() methods are not chained like constructors.i.e there is no calling statement to super class finalize() method inside the finalize() method of sub class. You need to explicitly call super class finalize() method.

	protected void finalize() throws Throwable
	{
		System.out.println("From Finalize Method");
	 
		//Calling super class finalize() method explicitly
	 
		super.finalize();
	}

* Exceptions occurred in finalize() method are not propagated. They are ignored by the garbage collector.

* You can call finalize() method explicitly on an object before it is abandoned. When you call, only operations kept in finalize() method are performed on an object. Object will not be destroyed from the memory.
	

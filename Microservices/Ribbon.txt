You can use Spring Cloud Netflix Ribbon to provide client-side load balancing in calls to another microservice.

Ribbon: Load Balancer Without Eureka : 

Ribbon is a client-side load balancer, which gives you a lot of control over the behavior of HTTP and TCP clients. Ribbon's Client component offers a good set of configuration options such as connection timeouts, retries, retry algorithm (exponential, bounded back off) etc. Ribbon comes built in with a pluggable and customizable Load Balancing component. 

Some of the load balancing strategies offered are listed below:

	Simple Round Robin LB
	Weighted Response Time LB
	Zone Aware Round Robin LB
	Random LB
	
Client-Side Load Balancing :

An approach to load balancing is to deliver a list of server IPs to the client, and then to have client randomly select the IP from the list on each connection. It has been claimed that client-side random load balancing tends to provide better load distribution than round-robin DNS. With this approach, the method of delivery of lists of IPs to the client can vary, and may be implemented as a DNS list (delivered to all the clients without any round-robin), or via hardcoding it to the list. If a "smart client" is used, detecting that randomly selected server is down and connecting randomly again, it also provides fault tolerance.

Ribbon provides the following features:

Load balancing
Fault tolerance
Multiple protocols (HTTP, TCP, UDP) support in an asynchronous and reactive model
Caching and batching

		@SpringBootApplication
		@RestController
		@RibbonClient(name = "hello-service", configuration = HelloServiceConfiguration.class)
		public class UserApplication {
			@LoadBalanced
			@Bean
			RestTemplate restTemplate() {
				return new RestTemplate();
			}
			
			@Autowired
			RestTemplate restTemplate;
			@RequestMapping("/hi")
			public String hi(@RequestParam(value = "name", defaultValue = "Rafael") String name) {
				String greeting = this.restTemplate.getForObject("http://hello-service/greeting", String.class);
				return String.format("%s, %s!", greeting, name);
			}
			
			public static void main(String[] args) {
				SpringApplication.run(UserApplication.class, args);
			}
		}
		public class HelloServiceConfiguration {
			
			@Autowired
			IClientConfig ribbonClientConfig;
			
			@Bean
			public IPing ribbonPing(IClientConfig config) {
				return new PingUrl();
			}
			
			@Bean
			public IRule ribbonRule(IClientConfig config) {
				return new AvailabilityFilteringRule();
			}
		}
				
		spring:
		  application:
			name: user-service
		
		server:
		  port: 8888
		
		hello-service:
		  ribbon:
			eureka:
			  enabled: false
			listOfServers: localhost:8090,localhost:9092,localhost:9999
			ServerListRefreshInterval: 15000
			
-----------------------------------------------------

Feign - Load Balancer using Eureka : 


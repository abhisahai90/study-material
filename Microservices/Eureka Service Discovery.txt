Netflix Eureka server is for building the service registry server and Eureka clients which will register themselves and discover other services to call REST APIs.

As we know these days, there is a lot of momentum around Microservices. The transition from Monolithic to Microservice based architecture gives many benefits for future in terms of maintainability, scalability, high availability etc. However at the same time, there are many challenges also while doing this migration. One of them is to maintain individual Microservices addresses. This task can be hugely complex – depending on number of services and their dynamic nature. If whole infrastructure is distributed and there is some replication as well, then maintaining this service addresses becomes harder.

To solve this, in the distributed computing are there is a concept called ‘Service registration and discovery’ where one dedicated server is responsible to maintain the registry of all the Microservice that has been deployed and removed. 

Think of it as a lookup service where microservices (clients) can register themselves and discover other registered microservices. When a client microservice registers with Eureka it provides metadata such as host, port, and health indicator thus allowing for other microservices to discover it. The discovery server expects a regular heartbeat message from each microservice instance. If an instance begins to consistently fail to send a heartbeat, the discovery server will remove the instance from his registry. This way we will have a very stable ecosystem of Microservices collaborating among each other, and on top of it we don’t have to manually maintain address of other Microservice, which is a next to impossible task if the scale up/down is very frequent, on demand and we use virtual host to host the services specially in the cloud environment.

Eureka Server Configuration :

Add @EnableEurekaServer on the Spring Application class.

add below configuratios in application.yml file.

		server:
			port : 8761
			
		eureka:
			client:
				registerWithEureka:false
				fetchRegistry:false
			server:
				waitTimeInMsWhenSyncEmpty:0
		
Eureka Client Configuration :

Add @EnabledEurekaClient annotation on Spring Application class.

Add below configurations in application.yml file

		server:
			port: 8080
		eureka:
			client:
				service-url:
					defaultZone: http://localhost:8761/eureka
				healthcheck:
					enabled:true

		spring:
			application:
				name:service-name
				
Whatever spring aplication name we will give here, It will register with same name in eureka as well.

WHILE CREATING RESTTEMPLATE BEAN ADD @LoadBalanced on top of it. 
		